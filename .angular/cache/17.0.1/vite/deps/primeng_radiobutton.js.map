{
  "version": 3,
  "sources": ["../../../../../node_modules/src/app/components/radiobutton/radiobutton.ts", "../../../../../node_modules/src/app/components/radiobutton/primeng-radiobutton.ts"],
  "sourcesContent": ["import { NgModule, Component, Input, Output, ElementRef, EventEmitter, forwardRef, ViewChild, ChangeDetectorRef, ChangeDetectionStrategy, Injectable, Injector, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl } from '@angular/forms';\nimport { Nullable } from 'primeng/ts-helpers';\nimport { RadioButtonClickEvent } from './radiobutton.interface';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButton),\n    multi: true\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RadioControlRegistry {\n    private accessors: any[] = [];\n\n    add(control: NgControl, accessor: RadioButton) {\n        this.accessors.push([control, accessor]);\n    }\n\n    remove(accessor: RadioButton) {\n        this.accessors = this.accessors.filter((c) => {\n            return c[1] !== accessor;\n        });\n    }\n\n    select(accessor: RadioButton) {\n        this.accessors.forEach((c) => {\n            if (this.isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].writeValue(accessor.value);\n            }\n        });\n    }\n\n    private isSameGroup(controlPair: [NgControl, RadioButton], accessor: RadioButton): boolean {\n        if (!controlPair[0].control) {\n            return false;\n        }\n\n        return controlPair[0].control.root === (accessor as any).control.control.root && controlPair[1].name === accessor.name;\n    }\n}\n/**\n * RadioButton is an extension to standard radio button element with theming.\n * @group Components\n */\n@Component({\n    selector: 'p-radioButton',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{ 'p-radiobutton p-component': true, 'p-radiobutton-checked': checked, 'p-radiobutton-disabled': disabled, 'p-radiobutton-focused': focused }\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input\n                    #rb\n                    type=\"radio\"\n                    [attr.id]=\"inputId\"\n                    [attr.name]=\"name\"\n                    [attr.value]=\"value\"\n                    [attr.tabindex]=\"tabindex\"\n                    [attr.aria-checked]=\"checked\"\n                    [attr.aria-label]=\"ariaLabel\"\n                    [attr.aria-labelledby]=\"ariaLabelledBy\"\n                    [checked]=\"checked\"\n                    (change)=\"onChange($event)\"\n                    (focus)=\"onInputFocus($event)\"\n                    (blur)=\"onInputBlur($event)\"\n                    [disabled]=\"disabled\"\n                />\n            </div>\n            <div (click)=\"handleClick($event, rb, true)\" [ngClass]=\"{ 'p-radiobutton-box': true, 'p-highlight': checked, 'p-disabled': disabled, 'p-focus': focused }\">\n                <span class=\"p-radiobutton-icon\"></span>\n            </div>\n        </div>\n        <label\n            (click)=\"select($event)\"\n            [class]=\"labelStyleClass\"\n            [ngClass]=\"{ 'p-radiobutton-label': true, 'p-radiobutton-label-active': rb.checked, 'p-disabled': disabled, 'p-radiobutton-label-focus': focused }\"\n            *ngIf=\"label\"\n            [attr.for]=\"inputId\"\n            >{{ label }}</label\n        >\n    `,\n    providers: [RADIO_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'p-element'\n    }\n})\nexport class RadioButton implements ControlValueAccessor, OnInit, OnDestroy {\n    /**\n     * Value of the radiobutton.\n     * @group Props\n     */\n    @Input() value: any;\n    /**\n     * The name of the form control.\n     * @group Props\n     */\n    @Input() formControlName: string | undefined;\n    /**\n     * Name of the radiobutton group.\n     * @group Props\n     */\n    @Input() name: string | undefined;\n    /**\n     * When present, it specifies that the element should be disabled.\n     * @group Props\n     */\n    @Input() disabled: boolean | undefined;\n    /**\n     * Label of the radiobutton.\n     * @group Props\n     */\n    @Input() label: string | undefined;\n    /**\n     * Index of the element in tabbing order.\n     * @group Props\n     */\n    @Input() tabindex: number | undefined;\n    /**\n     * Identifier of the focus input to match a label defined for the component.\n     * @group Props\n     */\n    @Input() inputId: string | undefined;\n    /**\n     * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n     * @group Props\n     */\n    @Input() ariaLabelledBy: string | undefined;\n    /**\n     * Used to define a string that labels the input element.\n     * @group Props\n     */\n    @Input() ariaLabel: string | undefined;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    @Input() style: { [klass: string]: any } | null | undefined;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    @Input() styleClass: string | undefined;\n    /**\n     * Style class of the label.\n     * @group Props\n     */\n    @Input() labelStyleClass: string | undefined;\n    /**\n     * Callback to invoke on radio button click.\n     * @param {RadioButtonClickEvent} event - Custom click event.\n     * @group Emits\n     */\n    @Output() onClick: EventEmitter<RadioButtonClickEvent> = new EventEmitter<RadioButtonClickEvent>();\n    /**\n     * Callback to invoke when the receives focus.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    @Output() onFocus: EventEmitter<Event> = new EventEmitter<Event>();\n    /**\n     * Callback to invoke when the loses focus.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    @Output() onBlur: EventEmitter<Event> = new EventEmitter<Event>();\n\n    @ViewChild('rb') inputViewChild!: ElementRef;\n\n    public onModelChange: Function = () => {};\n\n    public onModelTouched: Function = () => {};\n\n    public checked: Nullable<boolean>;\n\n    public focused: Nullable<boolean>;\n\n    control: Nullable<NgControl>;\n\n    constructor(public cd: ChangeDetectorRef, private injector: Injector, private registry: RadioControlRegistry) {}\n\n    ngOnInit() {\n        this.control = this.injector.get(NgControl);\n        this.checkName();\n        this.registry.add(this.control, this);\n    }\n\n    handleClick(event: Event, radioButton: HTMLElement, focus: boolean) {\n        event.preventDefault();\n\n        if (this.disabled) {\n            return;\n        }\n\n        this.select(event);\n\n        if (focus) {\n            radioButton.focus();\n        }\n    }\n\n    select(event: Event) {\n        if (!this.disabled) {\n            this.inputViewChild.nativeElement.checked = true;\n            this.checked = true;\n            this.onModelChange(this.value);\n            this.registry.select(this);\n            this.onClick.emit({ originalEvent: event, value: this.value });\n        }\n    }\n\n    writeValue(value: any): void {\n        this.checked = value == this.value;\n\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\n            this.inputViewChild.nativeElement.checked = this.checked;\n        }\n\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n\n    onInputFocus(event: Event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event: Event) {\n        this.focused = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    onChange(event: Event) {\n        this.select(event);\n    }\n    /**\n     * Applies focus to input field.\n     * @group Method\n     */\n    public focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    ngOnDestroy() {\n        this.registry.remove(this);\n    }\n\n    private checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this.throwNameError();\n        }\n        if (!this.name && this.formControlName) {\n            this.name = this.formControlName;\n        }\n    }\n\n    private throwNameError() {\n        throw new Error(`\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName=\"food\" name=\"food\"></p-radioButton>\n        `);\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [RadioButton],\n    declarations: [RadioButton]\n})\nexport class RadioButtonModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],
  "mappings": "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",
  "names": ["RADIO_VALUE_ACCESSOR", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "RadioButton", "multi", "RadioControlRegistry", "accessors", "add", "control", "accessor", "push", "remove", "filter", "c", "select", "forEach", "isSameGroup", "writeValue", "value", "controlPair", "root", "name", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "args", "cd", "injector", "registry", "formControlName", "disabled", "label", "tabindex", "inputId", "ariaLabelledBy", "ariaLabel", "style", "styleClass", "labelStyleClass", "onClick", "EventEmitter", "onFocus", "onBlur", "inputViewChild", "onModelChange", "onModelTouched", "checked", "focused", "constructor", "ngOnInit", "get", "NgControl", "checkName", "handleClick", "event", "radioButton", "focus", "preventDefault", "nativeElement", "emit", "originalEvent", "markForCheck", "registerOnChange", "fn", "registerOnTouched", "setDisabledState", "val", "onInputFocus", "onInputBlur", "onChange", "ngOnDestroy", "throwNameError", "Error", "ChangeDetectorRef", "Injector", "ɵcmp", "selectors", "viewQuery", "RadioButton_Query", "rf", "ctx", "decls", "vars", "consts", "template", "RadioButton_Template", "_r4", "NgClass", "NgIf", "NgStyle", "encapsulation", "changeDetection", "Component", "selector", "providers", "ChangeDetectionStrategy", "OnPush", "host", "class", "Input", "Output", "ViewChild", "RadioButtonModule", "ɵmod", "declarations", "imports", "CommonModule", "exports", "ɵinj", "NgModule"]
}

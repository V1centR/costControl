{
  "version": 3,
  "sources": ["../../../../../projects/ngx-currency/src/lib/ngx-currency.config.ts", "../../../../../projects/ngx-currency/src/lib/input.manager.ts", "../../../../../projects/ngx-currency/src/lib/input.service.ts", "../../../../../projects/ngx-currency/src/lib/input.handler.ts", "../../../../../projects/ngx-currency/src/lib/ngx-currency.directive.ts", "../../../../../projects/ngx-currency/src/lib/ngx-currency.providers.ts", "../../../../../projects/ngx-currency/src/public-api.ts", "../../../../../projects/ngx-currency/src/ngx-currency.ts"],
  "sourcesContent": ["import { InjectionToken } from '@angular/core';\n\nexport interface NgxCurrencyConfig {\n  align: string;\n  allowNegative: boolean;\n  allowZero: boolean;\n  decimal: string;\n  precision: number;\n  prefix: string;\n  suffix: string;\n  thousands: string;\n  nullable: boolean;\n  min?: number | null;\n  max?: number | null;\n  inputMode?: NgxCurrencyInputMode;\n}\n\nexport enum NgxCurrencyInputMode {\n  Financial,\n  Natural,\n}\n\nexport const NGX_CURRENCY_CONFIG = new InjectionToken<\n  Partial<NgxCurrencyConfig>\n>('ngx-currency.config');\n", "export class InputManager {\n  private _storedRawValue: string | null = null;\n\n  constructor(private readonly _htmlInputElement: HTMLInputElement) {}\n\n  setCursorAt(position: number): void {\n    this._htmlInputElement.focus();\n    this._htmlInputElement.setSelectionRange(position, position);\n  }\n\n  updateValueAndCursor(\n    newRawValue: string,\n    oldLength: number,\n    selectionStart: number\n  ): void {\n    this.rawValue = newRawValue;\n    const newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n\n  get canInputMoreNumbers(): boolean {\n    const onlyNumbers =\n      this.rawValue?.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, '') ?? '';\n    const hasReachedMaxLength = !(\n      onlyNumbers.length >= this._htmlInputElement.maxLength &&\n      this._htmlInputElement.maxLength >= 0\n    );\n    const selectionStart = this.inputSelection.selectionStart;\n    const selectionEnd = this.inputSelection.selectionEnd;\n    const haveNumberSelected = !!(\n      selectionStart != selectionEnd &&\n      this._htmlInputElement.value\n        .substring(selectionStart, selectionEnd)\n        .match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/)\n    );\n    const startWithZero = this._htmlInputElement.value.substring(0, 1) == '0';\n    return hasReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n\n  get inputSelection(): {\n    selectionStart: number;\n    selectionEnd: number;\n  } {\n    return {\n      selectionStart: this._htmlInputElement.selectionStart ?? 0,\n      selectionEnd: this._htmlInputElement.selectionEnd ?? 0,\n    };\n  }\n\n  get rawValue(): string | null {\n    return this._htmlInputElement && this._htmlInputElement.value;\n  }\n  set rawValue(value: string | null) {\n    this._storedRawValue = value;\n\n    if (this._htmlInputElement) {\n      this._htmlInputElement.value = value ?? '';\n    }\n  }\n\n  get storedRawValue(): string {\n    return this._storedRawValue || '';\n  }\n}\n", "import { InputManager } from './input.manager';\nimport { NgxCurrencyConfig, NgxCurrencyInputMode } from './ngx-currency.config';\n\nexport class InputService {\n  private readonly _singleDigitRegex = new RegExp(\n    /^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/\n  );\n  private readonly _onlyNumbersRegex = new RegExp(\n    /[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g\n  );\n\n  private readonly _perArNumber = new Map<string, string>([\n    ['\\u06F0', '0'],\n    ['\\u06F1', '1'],\n    ['\\u06F2', '2'],\n    ['\\u06F3', '3'],\n    ['\\u06F4', '4'],\n    ['\\u06F5', '5'],\n    ['\\u06F6', '6'],\n    ['\\u06F7', '7'],\n    ['\\u06F8', '8'],\n    ['\\u06F9', '9'],\n\n    ['\\u0660', '0'],\n    ['\\u0661', '1'],\n    ['\\u0662', '2'],\n    ['\\u0663', '3'],\n    ['\\u0664', '4'],\n    ['\\u0665', '5'],\n    ['\\u0666', '6'],\n    ['\\u0667', '7'],\n    ['\\u0668', '8'],\n    ['\\u0669', '9'],\n  ]);\n\n  inputManager: InputManager;\n\n  constructor(\n    htmlInputElement: HTMLInputElement,\n    private _options: NgxCurrencyConfig\n  ) {\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n\n  addNumber(keyCode: number): void {\n    const { decimal, precision, inputMode } = this._options;\n    const keyChar = String.fromCharCode(keyCode);\n    const isDecimalChar = keyChar === this._options.decimal;\n\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, keyChar);\n      let selectionStart: number | undefined = undefined;\n      if (inputMode === NgxCurrencyInputMode.Natural && precision > 0) {\n        selectionStart = this.rawValue.indexOf(decimal);\n        if (isDecimalChar) {\n          selectionStart++;\n        }\n      }\n      this.updateFieldValue(selectionStart);\n    } else {\n      const selectionStart = this.inputSelection.selectionStart;\n      const selectionEnd = this.inputSelection.selectionEnd;\n      const rawValueStart = this.rawValue.substring(0, selectionStart);\n      let rawValueEnd = this.rawValue.substring(\n        selectionEnd,\n        this.rawValue.length\n      );\n\n      // In natural mode, replace decimals instead of shifting them.\n      const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n      if (\n        inputMode === NgxCurrencyInputMode.Natural &&\n        inDecimalPortion &&\n        selectionStart === selectionEnd\n      ) {\n        rawValueEnd = rawValueEnd.substring(1);\n      }\n\n      const newValue = rawValueStart + keyChar + rawValueEnd;\n      let nextSelectionStart = selectionStart + 1;\n      const isDecimalOrThousands =\n        isDecimalChar || keyChar === this._options.thousands;\n      if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n        // If the cursor is just before the decimal or thousands separator and the user types the\n        // decimal or thousands separator, move the cursor past it.\n        nextSelectionStart++;\n      } else if (!this._singleDigitRegex.test(keyChar)) {\n        // Ignore other non-numbers.\n        return;\n      }\n\n      this.rawValue = newValue;\n      this.updateFieldValue(nextSelectionStart);\n    }\n  }\n\n  applyMask(\n    isNumber: boolean,\n    rawValue: string,\n    disablePadAndTrim = false\n  ): string {\n    const {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands,\n      min,\n      inputMode,\n    } = this._options;\n\n    let { max } = this._options;\n\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n\n    if (!onlyNumbers && rawValue !== decimal) {\n      return '';\n    }\n\n    if (\n      inputMode === NgxCurrencyInputMode.Natural &&\n      !isNumber &&\n      !disablePadAndTrim\n    ) {\n      rawValue = this.padOrTrimPrecision(rawValue);\n      onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n    }\n\n    let integerPart = onlyNumbers\n      .slice(0, onlyNumbers.length - precision)\n      .replace(/^\\u0660*/g, '')\n      .replace(/^\\u06F0*/g, '')\n      .replace(/^0*/g, '');\n\n    if (integerPart == '') {\n      integerPart = '0';\n    }\n    const integerValue = parseInt(integerPart);\n\n    integerPart = integerPart.replace(\n      /\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g,\n      thousands\n    );\n    if (thousands && integerPart.startsWith(thousands)) {\n      integerPart = integerPart.substring(1);\n    }\n\n    let newRawValue = integerPart;\n    const decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    const decimalValue = parseInt(decimalPart) || 0;\n\n    const isNegative = rawValue.indexOf('-') > -1;\n\n    // Ensure max is at least as large as min.\n    max =\n      max === null || max === undefined || min === null || min === undefined\n        ? max\n        : Math.max(max, min);\n\n    // Ensure precision number works well with more than 2 digits\n    // 23 / 100... 233 / 1000 and so on\n    const divideBy = Number('1'.padEnd(precision + 1, '0'));\n\n    // Restrict to the min and max values.\n    let newValue = integerValue + decimalValue / divideBy;\n\n    newValue = isNegative ? -newValue : newValue;\n    if (max !== null && max !== undefined && newValue > max) {\n      return this.applyMask(true, max + '');\n    } else if (min !== null && min !== undefined && newValue < min) {\n      return this.applyMask(true, min + '');\n    }\n\n    if (precision > 0) {\n      if (newRawValue == '0' && decimalPart.length < precision) {\n        newRawValue += decimal + '0'.repeat(precision - 1) + decimalPart;\n      } else {\n        newRawValue += decimal + decimalPart;\n      }\n    }\n\n    // let isZero = newValue == 0;\n    const operator = isNegative && allowNegative /*&& !isZero */ ? '-' : '';\n    return operator + prefix + newRawValue + suffix;\n  }\n\n  padOrTrimPrecision(rawValue: string): string {\n    const { decimal, precision } = this._options;\n\n    let decimalIndex = rawValue.lastIndexOf(decimal);\n    if (decimalIndex === -1) {\n      decimalIndex = rawValue.length;\n      rawValue += decimal;\n    }\n\n    let decimalPortion = rawValue\n      .substring(decimalIndex)\n      .replace(this._onlyNumbersRegex, '');\n    const actualPrecision = decimalPortion.length;\n    if (actualPrecision < precision) {\n      for (let i = actualPrecision; i < precision; i++) {\n        decimalPortion += '0';\n      }\n    } else if (actualPrecision > precision) {\n      decimalPortion = decimalPortion.substring(\n        0,\n        decimalPortion.length + precision - actualPrecision\n      );\n    }\n\n    return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n  }\n\n  clearMask(rawValue: string | null): number | null {\n    if (this.isNullable() && rawValue === '') return null;\n\n    let value = (rawValue || '0')\n      .replace(this._options.prefix, '')\n      .replace(this._options.suffix, '');\n\n    if (this._options.thousands) {\n      value = value.replace(\n        new RegExp('\\\\' + this._options.thousands, 'g'),\n        ''\n      );\n    }\n\n    if (this._options.decimal) {\n      value = value.replace(this._options.decimal, '.');\n    }\n\n    this._perArNumber.forEach((val: string, key: string) => {\n      const re = new RegExp(key, 'g');\n      value = value.replace(re, val);\n    });\n    return parseFloat(value);\n  }\n\n  changeToNegative(): void {\n    if (\n      this._options.allowNegative /*&& this.rawValue != \"\"*/ &&\n      this.rawValue?.charAt(0) != '-' /*&& this.value != 0*/\n    ) {\n      // Apply the mask to ensure the min and max values are enforced.\n      this.rawValue = this.applyMask(\n        false,\n        '-' + (this.rawValue ? this.rawValue : '0')\n      );\n    }\n  }\n\n  changeToPositive(): void {\n    // Apply the mask to ensure the min and max values are enforced.\n    this.rawValue = this.applyMask(\n      false,\n      this.rawValue?.replace('-', '') ?? ''\n    );\n  }\n\n  removeNumber(keyCode: number): void {\n    const { decimal, thousands, prefix, suffix, inputMode } = this._options;\n\n    if (this.isNullable() && this.value == 0) {\n      this.rawValue = null;\n      return;\n    }\n\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n\n    const suffixStart = (this.rawValue?.length ?? 0) - suffix.length;\n    selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n    selectionStart = Math.min(\n      suffixStart,\n      Math.max(selectionStart, prefix.length)\n    );\n\n    // Check if selection was entirely in the prefix or suffix.\n    if (\n      selectionStart === selectionEnd &&\n      this.inputSelection.selectionStart !== this.inputSelection.selectionEnd\n    ) {\n      this.updateFieldValue(selectionStart);\n      return;\n    }\n\n    let decimalIndex = this.rawValue?.indexOf(decimal) ?? -1;\n    if (decimalIndex === -1) {\n      decimalIndex = this.rawValue?.length ?? 0;\n    }\n\n    let shiftSelection = 0;\n    let insertChars = '';\n\n    const isCursorInDecimals = decimalIndex < selectionEnd;\n    const isCursorImmediatelyAfterDecimalPoint =\n      decimalIndex + 1 === selectionEnd;\n\n    if (selectionEnd === selectionStart) {\n      if (keyCode == 8) {\n        if (selectionStart <= prefix.length) {\n          return;\n        }\n        selectionStart--;\n\n        // If previous char isn't a number, go back one more.\n        if (\n          !this.rawValue\n            ?.substring(selectionStart, selectionStart + 1)\n            .match(/\\d/)\n        ) {\n          selectionStart--;\n        }\n\n        // In natural mode, jump backwards when in decimal portion of number.\n        if (inputMode === NgxCurrencyInputMode.Natural && isCursorInDecimals) {\n          shiftSelection = -1;\n          // when removing a single whole number, replace it with 0\n          if (\n            isCursorImmediatelyAfterDecimalPoint &&\n            (this.value ?? 0) < 10 &&\n            (this.value ?? 0) > -10\n          ) {\n            insertChars += '0';\n          }\n        }\n      } else if (keyCode == 46 || keyCode == 63272) {\n        if (selectionStart === suffixStart) {\n          return;\n        }\n        selectionEnd++;\n\n        // If next char isn't a number, go one more.\n        if (\n          !this.rawValue\n            ?.substring(selectionStart, selectionStart + 1)\n            .match(/\\d/)\n        ) {\n          selectionStart++;\n          selectionEnd++;\n        }\n      }\n    }\n\n    // In natural mode, replace decimals with 0s.\n    if (\n      inputMode === NgxCurrencyInputMode.Natural &&\n      selectionStart > decimalIndex\n    ) {\n      const replacedDecimalCount = selectionEnd - selectionStart;\n      for (let i = 0; i < replacedDecimalCount; i++) {\n        insertChars += '0';\n      }\n    }\n\n    let selectionFromEnd = (this.rawValue?.length ?? 0) - selectionEnd;\n    this.rawValue =\n      this.rawValue?.substring(0, selectionStart) +\n      insertChars +\n      this.rawValue?.substring(selectionEnd);\n\n    // Remove leading thousand separator from raw value.\n    const startChar = this.rawValue.substring(prefix.length, prefix.length + 1);\n    if (startChar === thousands) {\n      this.rawValue =\n        this.rawValue.substring(0, prefix.length) +\n        this.rawValue.substring(prefix.length + 1);\n      selectionFromEnd = Math.min(\n        selectionFromEnd,\n        this.rawValue.length - prefix.length\n      );\n    }\n\n    this.updateFieldValue(\n      this.rawValue.length - selectionFromEnd + shiftSelection,\n      true\n    );\n  }\n\n  updateFieldValue(selectionStart?: number, disablePadAndTrim = false): void {\n    const newRawValue = this.applyMask(\n      false,\n      this.rawValue ?? '',\n      disablePadAndTrim\n    );\n    selectionStart ??= this.rawValue?.length ?? 0;\n    selectionStart = Math.max(\n      this._options.prefix.length,\n      Math.min(\n        selectionStart,\n        (this.rawValue?.length ?? 0) - this._options.suffix.length\n      )\n    );\n    this.inputManager.updateValueAndCursor(\n      newRawValue,\n      this.rawValue?.length ?? 0,\n      selectionStart\n    );\n  }\n\n  updateOptions(options: NgxCurrencyConfig): void {\n    const value = this.value;\n    this._options = options;\n    this.value = value;\n  }\n\n  prefixLength(): number {\n    return this._options.prefix.length;\n  }\n\n  suffixLength(): number {\n    return this._options.suffix.length;\n  }\n\n  isNullable() {\n    return this._options.nullable;\n  }\n\n  get canInputMoreNumbers(): boolean {\n    return this.inputManager.canInputMoreNumbers;\n  }\n\n  get inputSelection(): {\n    selectionStart: number;\n    selectionEnd: number;\n  } {\n    return this.inputManager.inputSelection;\n  }\n\n  get rawValue(): string | null {\n    return this.inputManager.rawValue;\n  }\n\n  set rawValue(value: string | null) {\n    this.inputManager.rawValue = value;\n  }\n\n  get storedRawValue(): string {\n    return this.inputManager.storedRawValue;\n  }\n\n  get value(): number | null {\n    return this.clearMask(this.rawValue);\n  }\n\n  set value(value: number | null) {\n    this.rawValue = this.applyMask(true, '' + value);\n  }\n\n  private _isNullOrUndefined(value: number | null | undefined): boolean {\n    return value === null || value === undefined;\n  }\n}\n", "import { InputService } from './input.service';\nimport { NgxCurrencyConfig } from './ngx-currency.config';\n\nexport class InputHandler {\n  inputService: InputService;\n  onModelChange!: (value: number | null) => void;\n  onModelTouched!: () => void;\n\n  constructor(htmlInputElement: HTMLInputElement, options: NgxCurrencyConfig) {\n    this.inputService = new InputService(htmlInputElement, options);\n  }\n\n  handleCut(): void {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n\n  handleInput(): void {\n    const rawValue = this.inputService.rawValue ?? '';\n    const selectionStart = this.inputService.inputSelection.selectionStart;\n    const keyCode = rawValue.charCodeAt(selectionStart - 1);\n    const rawValueLength = rawValue.length;\n    const storedRawValueLength = this.inputService.storedRawValue.length;\n\n    if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n      this.inputService.updateFieldValue(selectionStart);\n      this.onModelChange(this.inputService.value);\n      return;\n    }\n\n    // Restore the old value.\n    this.inputService.rawValue = this.inputService.storedRawValue;\n\n    if (rawValueLength < storedRawValueLength) {\n      // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n      // input event, so we need to wrap this in a timeout.\n      this.timer(() => {\n        // Move the cursor to just after the deleted value.\n        this.inputService.updateFieldValue(selectionStart + 1);\n\n        // Then backspace it.\n        this.inputService.removeNumber(8);\n        this.onModelChange(this.inputService.value);\n      }, 0);\n    }\n\n    if (rawValueLength > storedRawValueLength) {\n      // Move the cursor to just before the new value.\n      this.inputService.updateFieldValue(selectionStart - 1);\n\n      // Process the character like a keypress.\n      this._handleKeypressImpl(keyCode);\n    }\n  }\n\n  handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n\n      if (\n        this.inputService.inputSelection.selectionStart <=\n          this.inputService.prefixLength() &&\n        this.inputService.inputSelection.selectionEnd >=\n          (this.inputService.rawValue?.length ?? 0) -\n            this.inputService.suffixLength()\n      ) {\n        this.clearValue();\n      } else {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n\n  clearValue() {\n    this.setValue(this.inputService.isNullable() ? null : 0);\n    this.onModelChange(this.inputService.value);\n  }\n\n  handleKeypress(event: KeyboardEvent): void {\n    const keyCode = event.which || event.charCode || event.keyCode;\n    event.preventDefault();\n    if (keyCode === 97 && event.ctrlKey) {\n      return;\n    }\n\n    this._handleKeypressImpl(keyCode);\n  }\n\n  private _handleKeypressImpl(keyCode: number): void {\n    switch (keyCode) {\n      case undefined:\n      case 9:\n      case 13:\n        return;\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n      default:\n        if (this.inputService.canInputMoreNumbers) {\n          const selectionRangeLength = Math.abs(\n            this.inputService.inputSelection.selectionEnd -\n              this.inputService.inputSelection.selectionStart\n          );\n\n          if (\n            selectionRangeLength == (this.inputService.rawValue?.length ?? 0)\n          ) {\n            this.setValue(null);\n          }\n\n          this.inputService.addNumber(keyCode);\n        }\n        break;\n    }\n\n    this.onModelChange(this.inputService.value);\n  }\n\n  handlePaste(): void {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n\n  updateOptions(options: NgxCurrencyConfig): void {\n    this.inputService.updateOptions(options);\n  }\n\n  getOnModelChange(): (value: number | null) => void {\n    return this.onModelChange;\n  }\n\n  setOnModelChange(callbackFunction: (value: number | null) => void): void {\n    this.onModelChange = callbackFunction;\n  }\n\n  getOnModelTouched(): () => void {\n    return this.onModelTouched;\n  }\n\n  setOnModelTouched(callbackFunction: () => void) {\n    this.onModelTouched = callbackFunction;\n  }\n\n  setValue(value: number | null): void {\n    this.inputService.value = value;\n  }\n\n  /**\n   * Passthrough to setTimeout that can be stubbed out in tests.\n   */\n  timer(callback: () => void, delayMilliseconds: number) {\n    setTimeout(callback, delayMilliseconds);\n  }\n}\n", "import {\n  AfterViewInit,\n  Directive,\n  DoCheck,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  OnInit,\n  Optional,\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { InputHandler } from './input.handler';\nimport {\n  NgxCurrencyConfig,\n  NgxCurrencyInputMode,\n  NGX_CURRENCY_CONFIG,\n} from './ngx-currency.config';\n\n@Directive({\n  standalone: true,\n  selector: '[currencyMask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxCurrencyDirective),\n      multi: true,\n    },\n  ],\n})\nexport class NgxCurrencyDirective\n  implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit\n{\n  @Input() options: Partial<NgxCurrencyConfig> = {};\n\n  private _inputHandler!: InputHandler;\n  private readonly _keyValueDiffer: KeyValueDiffer<\n    keyof NgxCurrencyConfig,\n    unknown\n  >;\n\n  private _optionsTemplate: NgxCurrencyConfig;\n\n  constructor(\n    @Optional()\n    @Inject(NGX_CURRENCY_CONFIG)\n    globalOptions: Partial<NgxCurrencyConfig>,\n    keyValueDiffers: KeyValueDiffers,\n    private readonly _elementRef: ElementRef\n  ) {\n    this._optionsTemplate = {\n      align: 'right',\n      allowNegative: true,\n      allowZero: true,\n      decimal: '.',\n      precision: 2,\n      prefix: '$ ',\n      suffix: '',\n      thousands: ',',\n      nullable: false,\n      inputMode: NgxCurrencyInputMode.Financial,\n      ...globalOptions,\n    };\n\n    this._keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n\n  ngOnInit() {\n    this._inputHandler = new InputHandler(this._elementRef.nativeElement, {\n      ...this._optionsTemplate,\n      ...this.options,\n    });\n  }\n\n  ngAfterViewInit() {\n    this._elementRef.nativeElement.style.textAlign =\n      this.options?.align ?? this._optionsTemplate.align;\n  }\n\n  ngDoCheck() {\n    if (this._keyValueDiffer.diff(this.options)) {\n      this._elementRef.nativeElement.style.textAlign =\n        this.options?.align ?? this._optionsTemplate.align;\n\n      this._inputHandler.updateOptions({\n        ...this._optionsTemplate,\n        ...this.options,\n      });\n    }\n  }\n\n  @HostListener('blur', ['$event'])\n  handleBlur(event: FocusEvent) {\n    this._inputHandler.getOnModelTouched().apply(event);\n  }\n\n  @HostListener('cut')\n  handleCut() {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleCut();\n    }\n  }\n\n  @HostListener('input')\n  handleInput() {\n    if (this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleInput();\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  handleKeydown(event: KeyboardEvent) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleKeydown(event);\n    }\n  }\n\n  @HostListener('keypress', ['$event'])\n  handleKeypress(event: KeyboardEvent) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleKeypress(event);\n    }\n  }\n\n  @HostListener('paste')\n  handlePaste() {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handlePaste();\n    }\n  }\n\n  @HostListener('drop', ['$event'])\n  handleDrop(event: DragEvent) {\n    if (!this.isChromeAndroid()) {\n      event.preventDefault();\n    }\n  }\n\n  isChromeAndroid(): boolean {\n    return (\n      /chrome/i.test(navigator.userAgent) &&\n      /android/i.test(navigator.userAgent)\n    );\n  }\n\n  isReadOnly(): boolean {\n    return this._elementRef.nativeElement.hasAttribute('readonly');\n  }\n\n  registerOnChange(callbackFunction: (value: number | null) => void): void {\n    this._inputHandler.setOnModelChange(callbackFunction);\n  }\n\n  registerOnTouched(callbackFunction: () => void): void {\n    this._inputHandler.setOnModelTouched(callbackFunction);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._elementRef.nativeElement.disabled = isDisabled;\n  }\n\n  writeValue(value: number): void {\n    this._inputHandler.setValue(value);\n  }\n}\n", "import { EnvironmentProviders, makeEnvironmentProviders } from '@angular/core';\nimport { NgxCurrencyConfig, NGX_CURRENCY_CONFIG } from './ngx-currency.config';\n\nexport function provideEnvironmentNgxCurrency(\n  config: Partial<NgxCurrencyConfig>\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: NGX_CURRENCY_CONFIG,\n      useValue: config,\n    },\n  ]);\n}\n", "/*\n * Public API Surface of ngx-currency\n */\n\nexport * from './lib/ngx-currency.config';\nexport * from './lib/ngx-currency.directive';\nexport * from './lib/ngx-currency.providers';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],
  "mappings": "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",
  "names": ["NgxCurrencyInputMode", "NGX_CURRENCY_CONFIG", "InjectionToken", "InputManager", "constructor", "_htmlInputElement", "_storedRawValue", "setCursorAt", "position", "focus", "setSelectionRange", "updateValueAndCursor", "newRawValue", "oldLength", "selectionStart", "rawValue", "newLength", "length", "canInputMoreNumbers", "onlyNumbers", "replace", "hasReachedMaxLength", "maxLength", "inputSelection", "selectionEnd", "haveNumberSelected", "value", "substring", "match", "startWithZero", "storedRawValue", "InputService", "htmlInputElement", "_options", "_singleDigitRegex", "RegExp", "_onlyNumbersRegex", "_perArNumber", "Map", "inputManager", "addNumber", "keyCode", "decimal", "precision", "inputMode", "keyChar", "String", "fromCharCode", "isDecimalChar", "applyMask", "undefined", "Natural", "indexOf", "updateFieldValue", "rawValueStart", "rawValueEnd", "inDecimalPortion", "newValue", "nextSelectionStart", "isDecimalOrThousands", "thousands", "test", "isNumber", "disablePadAndTrim", "allowNegative", "prefix", "suffix", "min", "max", "Number", "toFixed", "padOrTrimPrecision", "integerPart", "slice", "integerValue", "parseInt", "startsWith", "decimalPart", "decimalValue", "isNegative", "Math", "divideBy", "padEnd", "repeat", "operator", "decimalIndex", "lastIndexOf", "decimalPortion", "actualPrecision", "i", "clearMask", "isNullable", "forEach", "val", "key", "re", "parseFloat", "changeToNegative", "charAt", "changeToPositive", "removeNumber", "suffixStart", "shiftSelection", "insertChars", "isCursorInDecimals", "isCursorImmediatelyAfterDecimalPoint", "replacedDecimalCount", "selectionFromEnd", "startChar", "updateOptions", "options", "prefixLength", "suffixLength", "nullable", "_isNullOrUndefined", "InputHandler", "inputService", "handleCut", "setTimeout", "setValue", "onModelChange", "handleInput", "charCodeAt", "rawValueLength", "storedRawValueLength", "abs", "timer", "_handleKeypressImpl", "handleKeydown", "event", "which", "charCode", "preventDefault", "clearValue", "handleKeypress", "ctrlKey", "selectionRangeLength", "handlePaste", "getOnModelChange", "setOnModelChange", "callbackFunction", "getOnModelTouched", "onModelTouched", "setOnModelTouched", "callback", "delayMilliseconds", "NgxCurrencyDirective", "globalOptions", "keyValueDiffers", "_elementRef", "_optionsTemplate", "align", "allowZero", "Financial", "_keyValueDiffer", "find", "create", "ngOnInit", "_inputHandler", "nativeElement", "ngAfterViewInit", "style", "textAlign", "ngDoCheck", "diff", "handleBlur", "apply", "isChromeAndroid", "isReadOnly", "handleDrop", "navigator", "userAgent", "hasAttribute", "registerOnChange", "registerOnTouched", "setDisabledState", "isDisabled", "disabled", "writeValue", "ɵfac", "NgxCurrencyDirective_Factory", "t", "ɵɵdirectiveInject", "KeyValueDiffers", "ElementRef", "ɵdir", "ɵɵdefineDirective", "type", "selectors", "hostBindings", "NgxCurrencyDirective_HostBindings", "rf", "ctx", "i0", "ɵɵlistener", "NgxCurrencyDirective_blur_HostBindingHandler", "$event", "NgxCurrencyDirective_cut_HostBindingHandler", "NgxCurrencyDirective_input_HostBindingHandler", "NgxCurrencyDirective_keydown_HostBindingHandler", "NgxCurrencyDirective_keypress_HostBindingHandler", "NgxCurrencyDirective_paste_HostBindingHandler", "NgxCurrencyDirective_drop_HostBindingHandler", "inputs", "standalone", "features", "ɵɵProvidersFeature", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "multi", "ɵsetClassMetadata", "Directive", "args", "selector", "providers", "Optional", "Inject", "Input", "HostListener", "provideEnvironmentNgxCurrency", "config", "makeEnvironmentProviders", "useValue"]
}
